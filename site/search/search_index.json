{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bonnes pratiques","text":""},{"location":"#preparation-du-projet","title":"\ud83d\udee0\ufe0f Pr\u00e9paration du projet","text":"<ul> <li> Cr\u00e9er le d\u00e9p\u00f4t GitHub</li> <li> Ajouter un fichier README.md</li> <li> Ajouter un <code>.gitignore</code></li> <li> D\u00e9finir un fichier <code>LICENSE</code></li> </ul>"},{"location":"#documentation","title":"\ud83d\udcc4 Documentation","text":"<ul> <li> Ajouter une page d\u2019accueil \u00e0 la doc</li> <li> Documenter l'architecture du projet</li> <li> Lister les d\u00e9pendances principales</li> </ul>"},{"location":"MkDocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"MkDocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"MkDocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"MkDocs/#deployement-de-la-doc","title":"Deployement de la doc","text":"\u00c9tape \u00c0 faire 1 Installer MkDocs 2 Cr\u00e9er un dossier avec <code>mkdocs new</code> 3 Ajouter checklist en <code>.md</code> 4 Tester en local avec <code>serve</code> 5 D\u00e9ployer avec <code>gh-deploy</code> <p>NOte : Ctrl + C pour stop le serveur</p>"},{"location":"MkDocs/#site-accessible","title":"Site accessible","text":"<pre><code>https://TONUTILISATEUR.github.io/TONREPO/\n</code></pre>"},{"location":"MkDocs/#liste-des-icones","title":"Liste des icones","text":"<ul> <li>\u2714\ufe0f \u00c9tape valid\u00e9e</li> <li>\ud83d\udd52 En attente</li> <li>\u274c Probl\u00e8me \u00e0 corriger</li> <li>\u26a0\ufe0f V\u00e9rification n\u00e9cessaire</li> <li>\u2705 Succes</li> <li>\ud83d\udfe1 En cours</li> <li>\ud83d\udd34 Erreur</li> <li>\ud83d\udcdd A faire</li> <li>\u270f\ufe0f En cours de r\u00e9daction</li> <li>\ud83d\udd12 Restreint</li> </ul>"},{"location":"securite/","title":"\u2705 Check-list S\u00e9curit\u00e9","text":""},{"location":"securite/#code-backend","title":"Code Backend","text":"<ul> <li> Utiliser des requ\u00eates pr\u00e9par\u00e9es (PDO, Doctrine, Eloquent, etc.)</li> <li> <p> Valider toutes les donn\u00e9es en entr\u00e9e</p> <ul> <li>Filtrer les caract\u00e8res ind\u00e9sitables</li> <li>V\u00e9rifier le format ( num\u00e9rique, chaine de caract\u00e8re, date ...)</li> <li>V\u00e9rifier eventuellement avec une expression r\u00e9guli\u00e8re ( email ...)</li> <li>V\u00e9rifier la longueur des donn\u00e9es</li> </ul> </li> <li> <p> Echapper toutes les donn\u00e9es en sortie ( HTML, JSON, ... ) au cas ou il y aurait du code mal vaillant dans votre base de donn\u00e9es.</p> </li> <li> <p> G\u00e9rer les erreurs sans les afficher</p> <ul> <li>Enregistrer des logs</li> <li>Afficher des messages utilisateurs neutres ( Ne pas d\u00e9voiler trop d'information )</li> </ul> </li> <li> <p> Impl\u00e9menter une authentification s\u00e9curis\u00e9e</p> <ul> <li>Hash avec bcrypt ou argon2</li> <li>Rate limiting (bruteforce)</li> <li>Jetons CSRF pour les formulaires (prevu par les framework)</li> </ul> </li> <li> <p> G\u00e9rer les r\u00f4les et permissions (RBAC)</p> </li> <li> Journaliser les actions sensibles (connexion, modification de donn\u00e9es, etc.)</li> <li> Utiliser un analyseur de code statique PHPStan (niveau 5 minimum ) </li> </ul>"},{"location":"securite/#frontend","title":"Frontend","text":"<ul> <li> <p> Valider les formulaires c\u00f4t\u00e9 client (feedback imm\u00e9diat, economie de requete serveur)</p> </li> <li> <p> Ne jamais faire confiance aux donn\u00e9es entr\u00e9es par l'utilisateur</p> </li> <li> <p> Emp\u00eacher l'insersion de HTML brut dans une page \u00e0 partir d'une variable (attaque XSS)</p> </li> </ul> <p>Si c'est vraiment n\u00e9c\u00e9ssaire (Exemple l'utilisateur doit ecrire du texte avec des balises de code) Il faut nettoyer le HTML avant de l'afficher.   Eventuellement utiliser DOMpurify, accessible par npm ou CDN.</p> <ul> <li> Utiliser npm audit pour d\u00e9tecter les d\u00e9pendances vuln\u00e9rables</li> <li> \u00c9viter le stockage de donn\u00e9es sensibles dans le localStorage/sessionStorage</li> </ul>"},{"location":"securite/#base-de-donnees","title":"Base de donn\u00e9es","text":"<ul> <li> Utiliser un utilisateur MySQL avec droits limit\u00e9s</li> <li> D\u00e9finir des contraintes d\u2019int\u00e9grit\u00e9 (cl\u00e9 \u00e9trang\u00e8re, NOT NULL, UNIQUE\u2026)</li> </ul> <p>Attention !</p> <p>Ne pas rendre un champs nullable parce que c'est plus simple \u00e0 coder</p> <ul> <li> Ajouter des triggers pour prot\u00e9ger les donn\u00e9es sensibles ou historiques</li> <li> Mettre en place des sauvegardes r\u00e9guli\u00e8res</li> <li> Limiter les acces avec GANTT si possible</li> <li> Conserver toutdes historique, rien n'est vraiment effacer mais tout est archiver.</li> </ul>"},{"location":"documentation/","title":"Documentation d'un projet","text":"<p>Pourquoi documenter un projet informatique est essentiel ?</p> <p>La documentation est un pilier fondamental de tout projet informatique, qu\u2019il s\u2019agisse d\u2019une API, d\u2019une base de donn\u00e9es ou du code source lui-m\u00eame. </p> <p>Elle joue un r\u00f4le crucial \u00e0 plusieurs niveaux :</p>"},{"location":"documentation/#comprehension-et-communication","title":"Compr\u00e9hension et communication","text":"<p>Elle permet \u00e0 tous les membres de l\u2019\u00e9quipe \u2014 d\u00e9veloppeurs, testeurs, chefs de projet \u2014 de comprendre rapidement le fonctionnement du syst\u00e8me, sans devoir analyser tout le code. </p> <p>Cela r\u00e9duit les erreurs d\u2019interpr\u00e9tation et am\u00e9liore la collaboration.</p>"},{"location":"documentation/#maintenance-et-evolutivite","title":"Maintenance et \u00e9volutivit\u00e9","text":"<p>Un projet bien document\u00e9 est plus facile \u00e0 maintenir et \u00e0 faire \u00e9voluer. </p> <p>En cas de bug ou de mise \u00e0 jour, une bonne documentation aide \u00e0 identifier rapidement les impacts et les d\u00e9pendances.</p>"},{"location":"documentation/#onboarding-rapide","title":"Onboarding rapide","text":"<p>Lorsqu\u2019un nouveau d\u00e9veloppeur rejoint l\u2019\u00e9quipe, la documentation lui permet de monter en comp\u00e9tence plus vite sans d\u00e9pendre constamment de ses coll\u00e8gues.</p>"},{"location":"documentation/#transparence-et-professionnalisme","title":"Transparence et professionnalisme","text":"<p>Une documentation claire donne une image s\u00e9rieuse du projet. </p> <p>Elle est souvent indispensable pour les clients, les partenaires ou toute personne externe qui interagit avec l\u2019outil.</p>"},{"location":"documentation/#reduction-des-risques","title":"R\u00e9duction des risques","text":"<p>En cas de d\u00e9part d\u2019un membre cl\u00e9 de l\u2019\u00e9quipe, la documentation permet d\u2019\u00e9viter la perte de connaissance critique.</p>"},{"location":"documentation/api/","title":"Documenter une API","text":"<p>Voici un exemple de endpoint documenter. </p> <p>GET /users</p> <p>Description : Liste tous les utilisateurs</p> <p>Param\u00e8tres :</p> <ul> <li><code>page</code> (int) : Num\u00e9ro de page</li> </ul> <p>R\u00e9ponse :</p> <pre><code>[\n  { \"id\": 1, \"nom\": \"Jean\" },\n  { \"id\": 2, \"nom\": \"Marie\" }\n]\n</code></pre> <p>Cette structure assez classique apporte sufisament d'information pour comprendre l'API sans m\u00eame la tester.</p>"},{"location":"documentation/api/#criteres-dune-bonne-documentation-dapi","title":"Crit\u00e8res d\u2019une bonne documentation d\u2019API","text":"<ul> <li> <p>Clart\u00e9 : D\u00e9crivez pr\u00e9cis\u00e9ment chaque endpoint, param\u00e8tre, et r\u00e9ponse.</p> </li> <li> <p>Exemples : Fournissez des exemples de requ\u00eates (curl, Postman, etc.)</p> </li> <li> <p>Formatage : Utilisez une structure claire (titres, tableaux, code format\u00e9).</p> </li> <li> <p>Actualisation : Gardez la documentation \u00e0 jour avec les changements de l\u2019API.</p> </li> <li> <p>Navigation facile : Table des mati\u00e8res, liens entre sections, recherche.</p> </li> <li> <p>Testabilit\u00e9 : Int\u00e9gration avec des outils comme Swagger, Postman ou Insomnia pour tester directement.</p> </li> <li> <p>Contextualisation : Expliquez les cas d\u2019usage, limitations, erreurs courantes.</p> </li> </ul>"},{"location":"documentation/api/#documentation-avec-postman","title":"Documentation avec Postman","text":"<p>Cr\u00e9er une documentation avec Postman</p> <p>Postman est \u00e0 la fois un client d\u2019API et un outil de documentation. Voici les \u00e9tapes :</p>"},{"location":"documentation/api/#etapes","title":"\ud83d\udccc \u00c9tapes","text":"<ol> <li>Cr\u00e9er une collection : Regroupe vos requ\u00eates (GET, POST, etc.) dans une collection Postman.</li> <li> <p>Documenter chaque requ\u00eate :</p> </li> <li> <p>Nom clair</p> </li> <li>Description (but, param\u00e8tres, exemple de r\u00e9ponse)</li> <li>Ajouter des exemples de requ\u00eates/r\u00e9ponses</li> <li> <p>G\u00e9n\u00e9rer la documentation automatiquement :</p> </li> <li> <p>Cliquez sur la collection \u2192 \"View Documentation\"</p> </li> <li>Personnalisez le rendu</li> <li>Cliquez sur \"Publish Docs\" pour partager un lien public ou priv\u00e9</li> </ol>"},{"location":"documentation/api/#avantages","title":"\u2705 Avantages","text":"<ul> <li>Facile \u00e0 utiliser</li> <li>Interface graphique</li> <li>Documentation interactive</li> </ul>"},{"location":"documentation/api/#documentation-avec-openapi","title":"Documentation avec OpenAPI","text":"<p>OpenAPI (anciennement Swagger) est un standard de description d\u2019API REST.</p>"},{"location":"documentation/api/#etapes_1","title":"\ud83d\udccc \u00c9tapes","text":"<ol> <li>Cr\u00e9er un fichier YAML ou JSON qui d\u00e9crit l'API :</li> </ol> <pre><code>   openapi: 3.0.0\n   info:\n     title: API de gestion de t\u00e2ches\n     version: 1.0.0\n   paths:\n     /taches:\n       get:\n         summary: Liste des t\u00e2ches\n         responses:\n           '200':\n\n             description: Succ\u00e8s\n</code></pre> <p>yaml (Yet Another Markup Language) : Langage de s\u00e9rialisation de donn\u00e9es utilis\u00e9 pour l'\u00e9criture de fichier de configuration.  </p> <ol> <li> <p>Utiliser un outil comme Swagger UI ou Redoc pour afficher une documentation lisible :</p> </li> <li> <p>Swagger Editor (https://editor.swagger.io)</p> </li> <li>Redoc (https://github.com/Redocly/redoc)</li> </ol>"},{"location":"documentation/api/#avantages_1","title":"\u2705 Avantages","text":"<ul> <li>Standard reconnu</li> <li>Compatible avec de nombreux outils</li> <li>G\u00e9n\u00e9ration automatique de code possible</li> </ul>"},{"location":"documentation/api/#documentation-avec-bruno","title":"Documentation avec Bruno","text":"<p>Bruno est un outil open-source pour tester des API REST, alternatif \u00e0 Postman.</p>"},{"location":"documentation/api/#etapes_2","title":"\ud83d\udccc \u00c9tapes","text":"<ol> <li>Cr\u00e9ez un projet Bruno (dans un dossier local)</li> <li>Chaque requ\u00eate est un fichier <code>.bru</code> (au format texte)</li> <li>Les m\u00e9tadonn\u00e9es permettent d\u2019ajouter des descriptions, des tags, etc.</li> <li>Bruno ne g\u00e9n\u00e8re pas automatiquement une documentation HTML mais facilite une structuration textuelle propre dans Git.</li> </ol>"},{"location":"documentation/api/#avantages_2","title":"\u2705 Avantages","text":"<ul> <li>L\u00e9ger et bas\u00e9 sur des fichiers texte</li> <li>Id\u00e9al pour Git</li> <li>Open-source et rapide</li> </ul>"},{"location":"documentation/api/#faire-une-documentation-vanilla","title":"Faire une documentation vanilla","text":"<p>Il est possible de cr\u00e9er sans logiciel. Par exemple, avec un document Markdown, Word ou PDF :</p>"},{"location":"documentation/api/#structure-typique","title":"Structure typique","text":"<pre><code># API de gestion des utilisateurs\n\n## GET /users\n- **Description** : Liste tous les utilisateurs\n- **Param\u00e8tres** :\n  - `page` (int) : Num\u00e9ro de page\n- **R\u00e9ponse** :\n[\n  { \"id\": 1, \"nom\": \"Jean\" },\n  { \"id\": 2, \"nom\": \"Marie\" }\n]\n\n## POST /users\n\n* **Description** : Cr\u00e9e un nouvel utilisateur\n* **Corps JSON** :\n{\n  \"nom\": \"Jean Dupont\"\n}\n</code></pre> <p>Tu peux aussi utiliser Google Docs, Notion, ou m\u00eame un README.md sur GitHub.</p>"}]}