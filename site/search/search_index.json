{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcd8 Documentation du Projet Fil Rouge","text":"<p>Bienvenue dans la documentation du projet. Cette page vous guide \u00e0 travers les diff\u00e9rentes composantes cl\u00e9s du travail.</p>"},{"location":"#conception","title":"\ud83e\udde0 Conception","text":"<p>Pr\u00e9sentation des besoins, mod\u00e9lisation, maquettes, choix techniques, etc.</p> <p>\ud83d\udc49 Acc\u00e9der \u00e0 la section Conception</p>"},{"location":"#gestion-de-projet","title":"\ud83d\udccb Gestion de projet","text":"<p>Planification, suivi des t\u00e2ches, gestion des livrables et des jalons.</p> <p>\ud83d\udc49 Acc\u00e9der \u00e0 la section Gestion</p>"},{"location":"#securite","title":"\ud83d\udd10 S\u00e9curit\u00e9","text":"<p>Bonnes pratiques, gestion des acc\u00e8s, s\u00e9curit\u00e9 des donn\u00e9es et audit.</p> <p>\ud83d\udc49 Acc\u00e9der \u00e0 la section S\u00e9curit\u00e9</p>"},{"location":"#documentation-technique","title":"\ud83d\udcc4 Documentation technique","text":"<p>Structure du projet, API, installation, environnement, checklist de production.</p> <p>\ud83d\udc49 Acc\u00e9der \u00e0 la section Documentation</p>"},{"location":"#astuce","title":"\ud83d\udccc Astuce","text":"<p>Vous pouvez naviguer aussi via le menu lat\u00e9ral \u00e0 gauche, ou les onglets en haut (si activ\u00e9s via <code>navigation.tabs</code>).</p>"},{"location":"MkDocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"MkDocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"MkDocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"MkDocs/#deployement-de-la-doc","title":"Deployement de la doc","text":"\u00c9tape \u00c0 faire 1 Installer MkDocs 2 Cr\u00e9er un dossier avec <code>mkdocs new</code> 3 Ajouter checklist en <code>.md</code> 4 Tester en local avec <code>serve</code> 5 D\u00e9ployer avec <code>gh-deploy</code> <p>NOte : Ctrl + C pour stop le serveur</p>"},{"location":"MkDocs/#site-accessible","title":"Site accessible","text":"<pre><code>https://TONUTILISATEUR.github.io/TONREPO/\n</code></pre>"},{"location":"MkDocs/#liste-des-icones","title":"Liste des icones","text":"<ul> <li>\u2714\ufe0f \u00c9tape valid\u00e9e</li> <li>\ud83d\udd52 En attente</li> <li>\u274c Probl\u00e8me \u00e0 corriger</li> <li>\u26a0\ufe0f V\u00e9rification n\u00e9cessaire</li> <li>\u2705 Succes</li> <li>\ud83d\udfe1 En cours</li> <li>\ud83d\udd34 Erreur</li> <li>\ud83d\udcdd A faire</li> <li>\u270f\ufe0f En cours de r\u00e9daction</li> <li>\ud83d\udd12 Restreint</li> <li>\ud83d\udd27 Param\u00e8tre</li> </ul>"},{"location":"conception/","title":"Dossier de conception","text":""},{"location":"documentation/","title":"Documentation d'un projet","text":"<p>Pourquoi documenter un projet informatique est essentiel ?</p> <p>La documentation est un pilier fondamental de tout projet informatique, qu\u2019il s\u2019agisse d\u2019une API, d\u2019une base de donn\u00e9es ou du code source lui-m\u00eame. </p> <p>Elle joue un r\u00f4le crucial \u00e0 plusieurs niveaux :</p>"},{"location":"documentation/#comprehension-et-communication","title":"Compr\u00e9hension et communication","text":"<p>Elle permet \u00e0 tous les membres de l\u2019\u00e9quipe \u2014 d\u00e9veloppeurs, testeurs, chefs de projet \u2014 de comprendre rapidement le fonctionnement du syst\u00e8me, sans devoir analyser tout le code. </p> <p>Cela r\u00e9duit les erreurs d\u2019interpr\u00e9tation et am\u00e9liore la collaboration.</p>"},{"location":"documentation/#maintenance-et-evolutivite","title":"Maintenance et \u00e9volutivit\u00e9","text":"<p>Un projet bien document\u00e9 est plus facile \u00e0 maintenir et \u00e0 faire \u00e9voluer. </p> <p>En cas de bug ou de mise \u00e0 jour, une bonne documentation aide \u00e0 identifier rapidement les impacts et les d\u00e9pendances.</p>"},{"location":"documentation/#onboarding-rapide","title":"Onboarding rapide","text":"<p>Lorsqu\u2019un nouveau d\u00e9veloppeur rejoint l\u2019\u00e9quipe, la documentation lui permet de monter en comp\u00e9tence plus vite sans d\u00e9pendre constamment de ses coll\u00e8gues.</p>"},{"location":"documentation/#transparence-et-professionnalisme","title":"Transparence et professionnalisme","text":"<p>Une documentation claire donne une image s\u00e9rieuse du projet. </p> <p>Elle est souvent indispensable pour les clients, les partenaires ou toute personne externe qui interagit avec l\u2019outil.</p>"},{"location":"documentation/#reduction-des-risques","title":"R\u00e9duction des risques","text":"<p>En cas de d\u00e9part d\u2019un membre cl\u00e9 de l\u2019\u00e9quipe, la documentation permet d\u2019\u00e9viter la perte de connaissance critique.</p>"},{"location":"documentation/api/","title":"Documenter une API","text":"<p>Voici un exemple de endpoint documenter. </p> <p>GET /users</p> <p>Description : Liste tous les utilisateurs</p> <p>Param\u00e8tres :</p> <ul> <li><code>page</code> (int) : Num\u00e9ro de page</li> </ul> <p>R\u00e9ponse :</p> <pre><code>[\n  { \"id\": 1, \"nom\": \"Jean\" },\n  { \"id\": 2, \"nom\": \"Marie\" }\n]\n</code></pre> <p>Cette structure assez classique apporte sufisament d'information pour comprendre l'API sans m\u00eame la tester.</p>"},{"location":"documentation/api/#criteres-dune-bonne-documentation-dapi","title":"Crit\u00e8res d\u2019une bonne documentation d\u2019API","text":"<ul> <li> <p>Clart\u00e9 : D\u00e9crivez pr\u00e9cis\u00e9ment chaque endpoint, param\u00e8tre, et r\u00e9ponse.</p> </li> <li> <p>Exemples : Fournissez des exemples de requ\u00eates (curl, Postman, etc.)</p> </li> <li> <p>Formatage : Utilisez une structure claire (titres, tableaux, code format\u00e9).</p> </li> <li> <p>Actualisation : Gardez la documentation \u00e0 jour avec les changements de l\u2019API.</p> </li> <li> <p>Navigation facile : Table des mati\u00e8res, liens entre sections, recherche.</p> </li> <li> <p>Testabilit\u00e9 : Int\u00e9gration avec des outils comme Swagger, Postman ou Insomnia pour tester directement.</p> </li> <li> <p>Contextualisation : Expliquez les cas d\u2019usage, limitations, erreurs courantes.</p> </li> </ul>"},{"location":"documentation/api/#documentation-avec-postman","title":"Documentation avec Postman","text":"<p>Cr\u00e9er une documentation avec Postman</p> <p>Postman est \u00e0 la fois un client d\u2019API et un outil de documentation. Voici les \u00e9tapes :</p>"},{"location":"documentation/api/#etapes","title":"\ud83d\udccc \u00c9tapes","text":"<ol> <li>Cr\u00e9er une collection : Regroupe vos requ\u00eates (GET, POST, etc.) dans une collection Postman.</li> <li> <p>Documenter chaque requ\u00eate :</p> </li> <li> <p>Nom clair</p> </li> <li>Description (but, param\u00e8tres, exemple de r\u00e9ponse)</li> <li>Ajouter des exemples de requ\u00eates/r\u00e9ponses</li> <li> <p>G\u00e9n\u00e9rer la documentation automatiquement :</p> </li> <li> <p>Cliquez sur la collection \u2192 \"View Documentation\"</p> </li> <li>Personnalisez le rendu</li> <li>Cliquez sur \"Publish Docs\" pour partager un lien public ou priv\u00e9</li> </ol>"},{"location":"documentation/api/#avantages","title":"\u2705 Avantages","text":"<ul> <li>Facile \u00e0 utiliser</li> <li>Interface graphique</li> <li>Documentation interactive</li> </ul>"},{"location":"documentation/api/#documentation-avec-openapi","title":"Documentation avec OpenAPI","text":"<p>OpenAPI (anciennement Swagger) est un standard de description d\u2019API REST.</p>"},{"location":"documentation/api/#etapes_1","title":"\ud83d\udccc \u00c9tapes","text":"<ol> <li>Cr\u00e9er un fichier YAML ou JSON qui d\u00e9crit l'API :</li> </ol> <pre><code>   openapi: 3.0.0\n   info:\n     title: API de gestion de t\u00e2ches\n     version: 1.0.0\n   paths:\n     /taches:\n       get:\n         summary: Liste des t\u00e2ches\n         responses:\n           '200':\n\n             description: Succ\u00e8s\n</code></pre> <p>yaml (Yet Another Markup Language) : Langage de s\u00e9rialisation de donn\u00e9es utilis\u00e9 pour l'\u00e9criture de fichier de configuration.  </p> <ol> <li> <p>Utiliser un outil comme Swagger UI ou Redoc pour afficher une documentation lisible :</p> </li> <li> <p>Swagger Editor (https://editor.swagger.io)</p> </li> <li>Redoc (https://github.com/Redocly/redoc)</li> </ol>"},{"location":"documentation/api/#avantages_1","title":"\u2705 Avantages","text":"<ul> <li>Standard reconnu</li> <li>Compatible avec de nombreux outils</li> <li>G\u00e9n\u00e9ration automatique de code possible</li> </ul>"},{"location":"documentation/api/#documentation-avec-bruno","title":"Documentation avec Bruno","text":"<p>Bruno est un outil open-source pour tester des API REST, alternatif \u00e0 Postman.</p>"},{"location":"documentation/api/#etapes_2","title":"\ud83d\udccc \u00c9tapes","text":"<ol> <li>Cr\u00e9ez un projet Bruno (dans un dossier local)</li> <li>Chaque requ\u00eate est un fichier <code>.bru</code> (au format texte)</li> <li>Les m\u00e9tadonn\u00e9es permettent d\u2019ajouter des descriptions, des tags, etc.</li> <li>Bruno ne g\u00e9n\u00e8re pas automatiquement une documentation HTML mais facilite une structuration textuelle propre dans Git.</li> </ol>"},{"location":"documentation/api/#avantages_2","title":"\u2705 Avantages","text":"<ul> <li>L\u00e9ger et bas\u00e9 sur des fichiers texte</li> <li>Id\u00e9al pour Git</li> <li>Open-source et rapide</li> </ul>"},{"location":"documentation/api/#faire-une-documentation-vanilla","title":"Faire une documentation vanilla","text":"<p>Il est possible de cr\u00e9er sans logiciel. Par exemple, avec un document Markdown, Word ou PDF :</p>"},{"location":"documentation/api/#structure-typique","title":"Structure typique","text":"<pre><code># API de gestion des utilisateurs\n\n## GET /users\n- **Description** : Liste tous les utilisateurs\n- **Param\u00e8tres** :\n  - `page` (int) : Num\u00e9ro de page\n- **R\u00e9ponse** :\n[\n  { \"id\": 1, \"nom\": \"Jean\" },\n  { \"id\": 2, \"nom\": \"Marie\" }\n]\n\n## POST /users\n\n* **Description** : Cr\u00e9e un nouvel utilisateur\n* **Corps JSON** :\n{\n  \"nom\": \"Jean Dupont\"\n}\n</code></pre> <p>Tu peux aussi utiliser Google Docs, Notion, ou m\u00eame un README.md sur GitHub.</p>"},{"location":"gestion/","title":"La gestion de projet : rappels et bonnes pratiques","text":"<p>La gestion de projet est une comp\u00e9tence cl\u00e9 dans de nombreux domaines professionnels. En tant qu\u2019\u00e9tudiant d\u00e9j\u00e0 familiaris\u00e9 avec ses principes fondamentaux, il est essentiel de consolider vos acquis par des pratiques rigoureuses et adapt\u00e9es aux contextes vari\u00e9s que vous rencontrerez.</p>"},{"location":"gestion/#1-clarifiez-les-objectifs-des-le-depart","title":"1. Clarifiez les objectifs d\u00e8s le d\u00e9part","text":"<p>Assurez-vous que les objectifs du projet soient compris et partag\u00e9s par tous les acteurs. Un cadrage pr\u00e9cis d\u00e8s le lancement \u00e9vite les malentendus et oriente les d\u00e9cisions futures.</p>"},{"location":"gestion/#2-planifiez-de-maniere-realiste","title":"2. Planifiez de mani\u00e8re r\u00e9aliste","text":"<p>Utilisez des outils comme le diagramme de Gantt ou le r\u00e9troplanning pour visualiser les t\u00e2ches, les jalons et les d\u00e9pendances. Int\u00e9grez des marges de s\u00e9curit\u00e9 et tenez compte des impr\u00e9vus.</p>"},{"location":"gestion/#3-communiquez-efficacement","title":"3. Communiquez efficacement","text":"<p>Une communication fluide avec les parties prenantes est cruciale. Planifiez des points r\u00e9guliers (r\u00e9unions, comptes rendus, tableaux de bord) pour assurer un suivi clair de l\u2019avancement.</p>"},{"location":"gestion/#4-suivez-et-ajustez-en-continu","title":"4. Suivez et ajustez en continu","text":"<p>Un bon gestionnaire de projet ne se contente pas de suivre un plan : il l\u2019ajuste. Utilisez des indicateurs de performance pour d\u00e9tecter les \u00e9carts et r\u00e9agir rapidement.</p>"},{"location":"gestion/#5-favorisez-la-collaboration","title":"5. Favorisez la collaboration","text":"<p>Impliquez activement les membres de l\u2019\u00e9quipe. Une dynamique de groupe saine encourage l\u2019initiative, renforce l'engagement et am\u00e9liore la qualit\u00e9 des livrables.</p>"},{"location":"gestion/#6-capitalisez-en-fin-de-projet","title":"6. Capitalisez en fin de projet","text":"<p>Prenez le temps d\u2019analyser les r\u00e9ussites et les points \u00e0 am\u00e9liorer lors d\u2019un retour d\u2019exp\u00e9rience (REX). Cela vous permettra de progresser continuellement dans vos pratiques.</p>"},{"location":"gestion/git/","title":"Bonnes pratiques sur GitHub","text":""},{"location":"gestion/git/#preparation-du-projet","title":"\ud83d\udd27 Pr\u00e9paration du projet","text":"<ul> <li>Cr\u00e9er le d\u00e9p\u00f4t GitHub</li> <li>Ajouter un fichier README.md</li> <li>Ajouter un <code>.gitignore</code></li> <li>D\u00e9finir un fichier <code>LICENSE</code></li> </ul>"},{"location":"gestion/git/#structure-claire-du-depot","title":"\ud83d\udcc1 Structure claire du d\u00e9p\u00f4t","text":"<p>Note</p> <p>repo = d\u00e9pot</p> <ol> <li>Utiliser une structure propre</li> <li>Le fichier README.md est essentiel pour expliquer l'objectif du projet, comment l\u2019installer, l\u2019utiliser, etc.</li> </ol> <p>Exemple : </p> <pre><code>/mon-projet\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 tests/\n\u2514\u2500\u2500 .gitignore\n</code></pre> <p>Warning</p> <p>Pas de projet dans le projet</p>"},{"location":"gestion/git/#commits-clairs-et-frequents","title":"\ud83d\udcac Commits clairs et fr\u00e9quents","text":"<ol> <li>Des messages de commit explicites :</li> <li>Commits fr\u00e9quents = historique compr\u00e9hensible et possibilit\u00e9 de revenir en arri\u00e8re facilement.</li> </ol> <pre><code>\u2705 Bon : \"Corrige bug d\u2019affichage du tableau Markdown\"\n\u274c Mauvais : \"fix\" ou \"update\"\n</code></pre>"},{"location":"gestion/git/#utilisation-de-branches","title":"\u27b0 Utilisation de branches","text":"<ol> <li>Ne travaille pas directement sur <code>main</code>. Utilise une branche pour chaque fonctionnalit\u00e9 ou correction.</li> </ol> <pre><code>git checkout -b feat/nouvelle-fonction\n</code></pre>"},{"location":"gestion/git/#pull-requests-pr","title":"\u2705 Pull Requests (PR)","text":"<p>Faire une PR pour int\u00e9grer ton travail \u00e0 <code>main</code> et permettre la revue de code (m\u00eame pour un seul developpeur, c\u2019est une bonne habitude !).</p>"},{"location":"gestion/git/#utilisation-des-issues","title":"\ud83d\udcdd Utilisation des Issues","text":"<p>Utiliser les issues pour suivre les bugs, id\u00e9es ou t\u00e2ches \u00e0 faire.</p>"},{"location":"gestion/git/#documentation","title":"\ud83d\udcd8 Documentation","text":"<p>Mettre de la documentation dans un repo</p> <p>Il est recommand\u00e9 de mettre de la documentation dans un repo :</p> <ul> <li>README.md : pour l\u2019intro et les instructions de base</li> <li><code>/docs/</code> : pour des documents plus d\u00e9taill\u00e9s</li> <li>G\u00e9n\u00e9ration d'un site statique \u00e0 partir de cette doc avec GitHub Pages (ex : avec MkDocs ou Docusaurus)</li> </ul>"},{"location":"gestion/git/#les-fichiers-ignores","title":"\u274c Les fichiers ignor\u00e9s","text":"<p>Le fichier .gitignore sert \u00e0 exclure certains fichiers ou dossiers du suivi Git. Cela \u00e9vite d\u2019envoyer sur GitHub des fichiers sensibles, inutiles, temporaires ou propres \u00e0 votre environnement local.</p>"},{"location":"gestion/git/#que-faut-il-generalement-ignorer","title":"Que faut-il g\u00e9n\u00e9ralement ignorer ?","text":"<p>Voici une base typique : <pre><code># Fichiers syst\u00e8me\n.DS_Store\nThumbs.db\n\n# Environnements virtuels et variables sensibles\nvenv/\n.env\n*.env\n\n# Fichiers de configuration personnels (Python, logs, cache)\n*.pyc\n*.log\n*.sqlite3\n__pycache__/\n\n# Dossiers g\u00e9n\u00e9r\u00e9s (build / static / MkDocs / dist)\nsite/\ndist/\nbuild/\n\n# D\u00e9pendances\nnode_modules/\nvendor/\n\n# Fichiers d\u2019IDE ou \u00e9diteurs\n.vscode/\n.idea/\n</code></pre></p>"},{"location":"gestion/git/#bonnes-pratiques-associees","title":"Bonnes pratiques associ\u00e9es","text":"<p>Ne jamais commettre de fichiers dans node_modules/ ou vendor/ \u2014 ces dossiers sont recr\u00e9\u00e9s automatiquement via npm install ou composer install.</p> <p>Fournir un fichier package.json ou composer.json (\u00e9quivalent de requirements.txt) dans votre d\u00e9p\u00f4t pour faciliter l\u2019installation des d\u00e9pendances.</p> <p>Conserver les scripts de build (ex. : build.sh, Makefile, ou mkdocs.yml) dans le d\u00e9p\u00f4t pour que le projet reste facilement reproductible.</p>"},{"location":"gestion/git/#les-variables-denvironnement","title":"\ud83d\udee0\ufe0f Les variables d'environnement","text":""},{"location":"gestion/git/#le-fichier-env","title":"Le fichier .env","text":"<p>Le fichier .env contient des variables d\u2019environnement sensibles, comme :</p> <pre><code>API_KEY=abcdefgh12345678\nDATABASE_URL=postgres://user:pass@host/db\nSECRET_KEY=super-secret-value\n</code></pre> <p>Ce fichier ne doit jamais \u00eatre versionn\u00e9, car il contient des donn\u00e9es confidentielles.</p> <p>Vous devez donc ajouter .env dans votre .gitignore : <pre><code>.env\n</code></pre></p>"},{"location":"gestion/git/#le-fichier-envexample","title":"Le fichier .env.example","text":"<p>Ce fichier est une copie publique du fichier .env, sans les valeurs sensibles, mais avec les noms des variables attendues.</p> <p>Note</p> <p>Cela permet aux autres contributeurs de comprendre quelles variables ils doivent d\u00e9finir.</p> <p>Exemple : <pre><code># .env.example\nAPI_KEY=your-api-key-here\nDATABASE_URL=your-db-url-here\nSECRET_KEY=change-me\n</code></pre></p> <p>Cela montre clairement \u00e0 vos coll\u00e8gues ou utilisateurs quelles variables sont n\u00e9cessaires sans exposer vos propres donn\u00e9es.</p>"},{"location":"gestion/git/#suppression-de-fichier","title":"\ud83e\uddf9 Suppression de fichier","text":"<p>Horreur, j'ai des fichiers que je veux supprimer sur mon repo, car j'ai oubli\u00e9 de les ignorer.</p> <p>Pas de panique, cela arrive \u00e0 tout le monde ! Voici comment supprimer proprement des fichiers d\u00e9j\u00e0 suivis par Git mais que vous souhaitez d\u00e9sormais ignorer via <code>.gitignore</code>.</p>"},{"location":"gestion/git/#etapes-pour-supprimer-des-fichiers-deja-versionnes","title":"\u00c9tapes pour supprimer des fichiers d\u00e9j\u00e0 versionn\u00e9s","text":"<p>M\u00eame si vous ajoutez les fichiers ou dossiers \u00e0 <code>.gitignore</code>, Git continue de les suivre tant qu\u2019ils sont d\u00e9j\u00e0 dans l\u2019historique. Voici comment corriger cela :</p>"},{"location":"gestion/git/#1-ajouter-les-fichiersdossiers-a-gitignore","title":"1. Ajouter les fichiers/dossiers \u00e0 <code>.gitignore</code>","text":"<p>Par exemple, vous ajoutez :</p> <pre><code>node_modules/\n.env\nsite/\n</code></pre>"},{"location":"gestion/git/#2-supprimer-les-fichiers-du-suivi-git-sans-les-supprimer-localement","title":"2. Supprimer les fichiers du suivi Git sans les supprimer localement","text":"<p>Utilisez la commande suivante :</p> <pre><code>git rm --cached -r node_modules/ .env site/\n</code></pre> <ul> <li><code>--cached</code> : supprime du suivi Git, mais pas du disque local.</li> <li><code>-r</code> : pour supprimer r\u00e9cursivement dans les dossiers.</li> </ul> <p>\ud83d\udca1 Vous pouvez remplacer la liste par n\u2019importe quel fichier ou dossier que vous voulez \"d\u00e9suivre\".</p>"},{"location":"gestion/git/#3-committez-les-changements","title":"3. Committez les changements","text":"<pre><code>git commit -m \"Supprime les fichiers ignor\u00e9s du suivi Git\"\n</code></pre>"},{"location":"gestion/git/#4-poussez-les-changements-vers-github","title":"4. Poussez les changements vers GitHub","text":"<pre><code>git push\n</code></pre>"},{"location":"gestion/git/#astuce-bonus-tout-reinitialiser-optionnel","title":"Astuce bonus : tout r\u00e9initialiser (optionnel)","text":"<p>Si vous avez modifi\u00e9 beaucoup de choses, vous pouvez forcer Git \u00e0 ne suivre que les bons fichiers, avec :</p> <pre><code>git rm -r --cached .\ngit add .\ngit commit -m \"Nettoyage complet des fichiers suivis par erreur\"\ngit push\n</code></pre> <p>\u26a0\ufe0f Cette commande est radicale, utilisez-la seulement si vous \u00eates s\u00fbr que tout est bien pr\u00eat dans <code>.gitignore</code>.</p>"},{"location":"securite/","title":"Check-list S\u00e9curit\u00e9","text":""},{"location":"securite/#code-backend","title":"\u2699\ufe0f Code Backend","text":"<ul> <li> <p>Utiliser des requ\u00eates pr\u00e9par\u00e9es (PDO, Doctrine, Eloquent, etc.)</p> </li> <li> <p>Valider toutes les donn\u00e9es en entr\u00e9e :</p> <ul> <li>Filtrer les caract\u00e8res ind\u00e9sitables</li> <li>V\u00e9rifier le format ( num\u00e9rique, chaine de caract\u00e8re, date ...)</li> <li>V\u00e9rifier eventuellement avec une expression r\u00e9guli\u00e8re ( email ...)</li> <li>V\u00e9rifier la longueur des donn\u00e9es</li> </ul> </li> <li> <p>Echapper toutes les donn\u00e9es en sortie ( HTML, JSON, ... ) au cas ou il y aurait du code mal vaillant dans votre base de donn\u00e9es.</p> </li> <li> <p>G\u00e9rer les erreurs sans les afficher :</p> <ul> <li>Enregistrer des logs</li> <li>Afficher des messages utilisateurs neutres ( Ne pas d\u00e9voiler trop d'information )</li> </ul> </li> <li> <p>Impl\u00e9menter une authentification s\u00e9curis\u00e9e</p> <ul> <li>Hash avec bcrypt ou argon2</li> <li>Rate limiting (bruteforce)</li> <li>Jetons CSRF pour les formulaires (prevu par les framework)</li> </ul> </li> <li> <p>G\u00e9rer les r\u00f4les et permissions (RBAC)</p> </li> </ul> <p>Note</p> <p>RBAC signifie Role-Based Access Control, en fran\u00e7ais : Contr\u00f4le d\u2019Acc\u00e8s bas\u00e9 sur les R\u00f4les.</p> <ul> <li>Journaliser les actions sensibles (connexion, modification de donn\u00e9es, etc.)</li> <li>Utiliser un analyseur de code statique PHPStan (niveau 5 minimum ) </li> </ul>"},{"location":"securite/#frontend","title":"\ud83d\uddbc\ufe0f Frontend","text":"<ul> <li> <p>Valider les formulaires c\u00f4t\u00e9 client (feedback imm\u00e9diat, economie de requete serveur)</p> </li> <li> <p>Ne jamais faire confiance aux donn\u00e9es entr\u00e9es par l'utilisateur</p> </li> <li> <p>Emp\u00eacher l'insersion de HTML brut dans une page \u00e0 partir d'une variable (attaque XSS)</p> </li> </ul> <p>Si c'est vraiment n\u00e9c\u00e9ssaire (Exemple l'utilisateur doit ecrire du texte avec des balises de code) Il faut nettoyer le HTML avant de l'afficher.   Eventuellement utiliser DOMpurify, accessible par npm ou CDN.</p> <ul> <li>Utiliser npm audit pour d\u00e9tecter les d\u00e9pendances vuln\u00e9rables</li> <li>\u00c9viter le stockage de donn\u00e9es sensibles dans le localStorage/sessionStorage</li> </ul>"},{"location":"securite/#base-de-donnees","title":"\ud83d\uddc4\ufe0f Base de donn\u00e9es","text":"<ul> <li>Utiliser un utilisateur MySQL avec droits limit\u00e9s</li> <li>D\u00e9finir des contraintes d\u2019int\u00e9grit\u00e9 (cl\u00e9 \u00e9trang\u00e8re, NOT NULL, UNIQUE\u2026)</li> </ul> <p>Attention !</p> <p>Ne pas rendre un champs nullable parce que c'est plus simple \u00e0 coder</p> <ul> <li>Ajouter des triggers pour prot\u00e9ger les donn\u00e9es sensibles ou historiques</li> <li>Mettre en place des sauvegardes r\u00e9guli\u00e8res</li> <li>Limiter les acces avec GANTT si possible</li> <li>Conserver des historiques, rien n'est vraiment effacer mais tout est archiver.</li> </ul>"}]}